[url "https://jellyfish77@github.com"]
	insteadOf = https://github.com
	
[user]
	email = "jellyfish77@gmx.com"
	name = jellyfish77

[commit]
    template = ~/.gitmessage

[cola]
	spellcheck = false
  
[color]
    diff = auto
    status = auto
    branch = auto
    ui = true
  
[alias]
    # OQ - from: https://stackoverflow.com/questions/1838873/visualizing-branch-topology-in-git/34467298#34467298
	l1 = !"git l --since=1.weeks"
	l4 = !"git l --since=4.weeks"
	l = !"git lg -70"
	lg = !"git lg1"
	lg1 = !"git lg1-specific --all"
	lg2 = !"git lg2-specific --all"
	lg3 = !"git lg3-specific --all"

	lg1-specific = log --graph --abbrev-commit --relative-date --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'
	lg2-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
	lg3-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'

	f = fetch
	ls=ls-files                 # list all files in the staging index
	lss=ls-files -s	   			# list files in the staging index (with additional metadata)
	aa = add .                   # (a)dd all untracked changes to staging
	at = add -u 				# add only currently tracked files
	us = reset                  # (u)n(s)tage - remove all changes from staging, leaves working directory unchanged
	b = branch -a -vv           # list all (b)ranches
	ub = branch --no-merged master   # list all (u)merged (b)ranchnes (onto master)
	c = commit -av              # verbose - will show diff in text editor for commit message
	#c = commit
	cam = commit -am            # automatically add changes to tracked files (can skip git add .)
	c-am = commit --amend
	co = checkout
	com = checkout master     
	d = diff                   # show changes to all tracked files
	ds = diff --staged         # show changes to files in the "staged" area
	st = status
	sa = stash
	mt = mergetool
	cp = cherry-pick
	pl = pull --rebase
	ss = show --stat            # show the details of commit defaulting to last commit, e.g. "g ss", "g ss <tag>", "g ss <branch>" etc
	pa = push --all origin
	db = branch -d             	# delete branch
	nb = checkout -b            # create new branch and switch to it
	f = fetch
	cl = clean -d -x -f     # remove all untracked files from working directory
	rfc = rm --cached            # remove file from Staging without deleting from working
	m = merge
	gr=grep --ignore-case -n
	
	# fetch with notes
	fn = "!git fetch && git fetch origin refs/notes/commits:refs/notes/commits && git fetch origin "refs/notes/*:refs/notes/*""
	
	# push all to origin, then prune remote, then prune stale references
	pap = "!git push --all origin && git push --all --prune && git fetch -p #"
	# push with notes
	papn = "!git push --all origin && git push origin refs/notes/commits && git push origin "refs/notes/*" && git push --all --prune && git fetch -p #"
	
	# Reset HARD - will update all trees to <commit #> (defaults to HEAD) of current branch (working, index and commit history)
	# Usage:
	#  resh <commit> (where commit defaults to HEAD)
	resh = reset --hard
	
	# Update - git reset --hard does the same thing
	# Reset (Completely destory working directory and reset from branch)
	# * switch to a branch <version or branch>
	# * reset all tracked files to branch version
	# * remove all untracked files (clean)
	# usage: git res <version or branch>
	# Notes:
	# * "git checkout -- ."  will clear working directory
	res = "!git checkout -- . && git co \"$1\" && git reset HEAD && git clean -d -x -f && git st #"
	#res = "!f() { git co \"$1\" && git reset HEAD && git clean -d -x -f && git st; }; f"
	#res = !sh -c 'git clean -df && git checkout -- . && git co $1 && git reset HEAD && git clean -d -x -f && git st;' -
	
	# Show all files changed by the last commit on current branch
	chg = diff --name-only HEAD^ HEAD
    
[credential]
	helper = cache --timeout=28800

[http]
	postBuffer = 1048576000
	maxRequestBuffer = 100M

[core]
	compression = 0
	#pager = cat
	pager = awk 1
	excludesfile = ~/.gitignore_global

[gui]
	recentrepo = /home/otto/IBM/IIBT10

[diff]
    tool = vimdiff
